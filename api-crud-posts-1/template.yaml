AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: sam-crud-template-posts
      AttributeDefinitions:
        - AttributeName: postId
          AttributeType: 'S'
      KeySchema:
        - AttributeName: postId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  PostsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: sam-crud-posts-api
      Handler: posts.handler
      Runtime: nodejs14.x
      CodeUri: .
      MemorySize: 256
      Timeout: 30
      Events:
        CreatePostApi:
          Type: Api
          Properties:
            Path: /posts
            Method: post
            RestApiId: !Ref PostsApi
        ReadPostsApi:
          Type: Api
          Properties:
            Path: /posts/{postId}
            Method: get
            RestApiId: !Ref PostsApi
        UpdatePostApi:
          Type: Api
          Properties:
            Path: /posts/{postId}
            Method: put
            RestApiId: !Ref PostsApi
        DeletePostApi:
          Type: Api
          Properties:
            Path: /posts/{postId}
            Method: delete
            RestApiId: !Ref PostsApi

  PostsApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title: 'SAM CRUD Posts API'
          version: '1.0'
        securityDefinitions:
          MyCognitoAuthorizer:
            type: 'apiKey'
            name: 'Authorization'
            in: 'header'
            x-amazon-apigateway-authtype: 'cognito_user_pools'
            x-amazon-apigateway-authorizer:
              type: 'cognito_user_pools'
              providerARNs:
                - arn:aws:cognito-idp:us-east-1:350135973898:userpool/us-east-1_YGwdNyMBT
        paths:
          /posts:
            post:
              x-amazon-apigateway-integration:
                type: 'aws'
                httpMethod: 'POST'
                uri:
                  Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostsFunction.Arn}/invocations'
                passthroughBehavior: 'when_no_match'
                responses:
                  default:
                    statusCode: '200'
              security:
                - MyCognitoAuthorizer: []
          /posts/{postId}:
            get:
              x-amazon-apigateway-integration:
                type: 'aws'
                httpMethod: 'POST'
                uri:
                  Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostsFunction.Arn}/invocations'
                passthroughBehavior: 'when_no_match'
                responses:
                  default:
                    statusCode: '200'
              security:
                - MyCognitoAuthorizer: []
